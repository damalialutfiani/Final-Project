# -*- coding: utf-8 -*-
"""Programtx.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bHat9wPtppKbJA_ewoQIqskRVOx1kJxH
"""

import smbus
import time
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import binascii
import RPi.GPIO as GPIO   
from time import sleep     
GPIO.setwarnings(False)    
GPIO.setmode(GPIO.BOARD)   
GPIO.setup(12, GPIO.OUT, initial=GPIO.LOW)   

class ADXL345:
    # Global Variables
    EARTH_GRAVITY_MS2 = 9.80665
    GRAVITY_MS2 = None
    # This is the typical scale factor in g/LSB as given in the datasheet (page 4)
    SCALE_MULTIPLIER = 0.0039
    # This is the bus that we use to send data over I2C
    bus = smbus.SMBus(1)
    address = None
    DEBUG = False

    # ADXL345 Registers
    DATA_FORMAT = 0x31
    BANDWIDTH_RATE_REG = 0x2C
    POWER_CTL = 0x2D
    measure = 0x08

    BANDWIDTH_RATE_1600HZ = 0x0F
    BANDWIDTH_RATE_800HZ = 0x0E
    BANDWIDTH_RATE_400HZ = 0x0D
    BANDWIDTH_RATE_200HZ = 0x0C
    BANDWIDTH_RATE_100HZ = 0x0B
    BANDWIDTH_RATE_50HZ = 0x0A
    BANDWIDTH_RATE_25HZ = 0x09

    RANGE_2G = 0x00
    RANGE_4G = 0x01
    RANGE_8G = 0x02
    RANGE_16G = 0x03

    DATAX0 = 0x32
    DATAX1 = 0x33
    DATAY0 = 0x34
    DATAY1 = 0x35
    DATAZ0 = 0x36
    DATAZ1 = 0x37

    hasil = None

    def __init__(self,  address = 0x53, base_range = RANGE_2G, base_bandwidth_rate = BANDWIDTH_RATE_100HZ):
        self.GRAVITY_MS2 = self.EARTH_GRAVITY_MS2
        self.address = address
        self.set_bandwidth_rate(base_bandwidth_rate)
        self.set_range(base_range)
        self.enable_measurement()
        self.fuzzy()

    def enable_measurement(self):
        """Enables measurement by writing 0x08 to POWER_CTL."""
        try:
            self.bus.write_byte_data(self.address, self.POWER_CTL, self.measure)
        except:
            return -1

    def disable_measurement(self):
        """Disables measurement by writing 0x00 to POWER_CTL."""
        try:
            self.bus.write_byte_data(self.address, self.POWER_CTL, 0x00)
        except:
            return -1

    def read_measurement_mode(self):
        """Reads POWER_CTL.
        Returns the read value.
        """
        try:
            return self.bus.read_byte_data(self.address, self.POWER_CTL)
        except:
            return -1

    def set_bandwidth_rate(self, rate):
        """Changes the bandwidth rate by writing rate to BANDWIDTH_RATE_REG.
        rate -- the bandwidth rate the ADXL345 will be set to. Using a
        pre-defined rate is advised.
        """
        try:
            self.bus.write_byte_data(self.address, self.BANDWIDTH_RATE_REG, rate)
        except:
            return -1

    def read_bandwidth_rate(self):
        """Reads BANDWIDTH_RATE_REG.
        Returns the read value.
        """
        try:
            raw_bandwidth_rate = self.bus.read_byte_data(self.address, self.bandwidthRate)
            return raw_bandwidth_rate & 0x0F
        except:
            return -1

    # Changes the range of the ADXL345. Available ranges are 2G, 4G, 8G and 16G.
    def set_range(self, range):
        """Changes the range of the ADXL345.
        range -- the range to set the accelerometer to. Using a pre-defined
        range is advised.
        """
        value = None

        try:
            value = self.bus.read_byte_data(self.address, self.DATA_FORMAT)
        except:
            return -1

        value &= ~0x0F;
        value |= range;
        value |= 0x08;

        self.bus.write_byte_data(self.address, self.DATA_FORMAT, value)

    def read_range(self, hex):
        """Reads the range the ADXL345 is currently set to.
        hex -- If hex is true it wil return a hexadecimal value. If raw is false
        it will return a string.
        """
        raw_value = self.bus.read_byte_data(self.address, self.DATA_FORMAT)

        if hex is True:
            if raw_value == 8:
                return self.RANGE_2G
            elif raw_value == 9:
                return self.RANGE_4G
            elif raw_value == 10:
                return self.RANGE_8G
            elif raw_value == 11:
                return self.RANGE_16G
        elif hex is False:
            if raw_value == 8:
                return "2G"
            elif raw_value == 9:
                return "4G"
            elif raw_value == 10:
                return "8G"
            elif raw_value == 11:
                return "16G"
    def fuzzy(self):
        #The universe of variables and membership functions
        Xaxis = ctrl.Antecedent (np.arange(-3.5, 7.5, 0.2), 'Xaxis')
        Yaxis = ctrl.Antecedent(np.arange(-10.5, 15.5, 0.2), 'Yaxis')
        Zaxis = ctrl.Antecedent(np.arange(-15.5, 20.5, 0.2), 'Zaxis')
        BrakeLevel = ctrl.Consequent(np.arange(-0.05, 1.05, 0.2), 'BrakeLevel')

    	# Rules
        Xaxis['HardBrake'] = fuzz.trapmf(Xaxis.universe, [-3, -3, -0.5, 1])
        Xaxis['NoBrake'] = fuzz.trimf(Xaxis.universe, [-0.5, 1.5, 3.5])
        Xaxis['Brake'] = fuzz.trapmf(Xaxis.universe, [2.5, 4, 11.5, 12])
        Yaxis['HardBrake'] = fuzz.trapmf(Yaxis.universe, [-10, -10, 3.5, 6.5])
        Yaxis['Brake'] = fuzz.trimf(Yaxis.universe, [5, 7.5, 10])
        Yaxis['NoBrake'] = fuzz.trapmf(Yaxis.universe, [8.5, 11, 15, 25])
        Zaxis['Brake'] = fuzz.trapmf(Zaxis.universe, [-15, -15, 4, 9])
        Zaxis['NoBrake'] = fuzz.trimf(Zaxis.universe, [5, 11.5, 18])
        Zaxis['HardBrake'] = fuzz.trapmf(Zaxis.universe, [12, 16, 20, 30])
        BrakeLevel['NoBrake'] = fuzz.trapmf(BrakeLevel.universe, [0, 0, 0.2, 0.4])
        BrakeLevel['Brake'] = fuzz.trimf(BrakeLevel.universe, [0.3, 0.5, 0.7])
        BrakeLevel['HardBrake'] = fuzz.trapmf(BrakeLevel.universe, [0.6, 0.8, 1, 1])


    	#DECLARE THE RULES
        rule1 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule2 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule3 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule4 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule5 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule6 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule7 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule8 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule9 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        rule10 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule11 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule12 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule13 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule14 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule15 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule16 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule17 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule18 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        rule19 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule20 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule21 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule22 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule23 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule24 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule25 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule26 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule27 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        global brake_ctrl
        brake_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15, rule16, rule17, rule18, rule19, rule20, rule21, rule22, rule23, rule24, rule25, rule26, rule27])

    def get_all_axes(self, round = False):
        """Gets the measurement results from all the axes.
        round -- if round is true it will round to 4 digits.
        Returns a dictionary.
        """
        # Read the raw bytes from the ADXL345
        bytes = self.bus.read_i2c_block_data(self.address, self.DATAX0, 6)

	#bib = self.fuzzy(brake_ctrl)
        # bit shifting magic.
        x = bytes[0] | (bytes[1] << 8)
        if(x & (1 << 16 - 1)):
            x = x - (1 << 16)

        y = bytes[2] | (bytes[3] << 8)
        if(y & (1 << 16 - 1)):
            y = y - (1 << 16)

        z = bytes[4] | (bytes[5] << 8)
        if(z & (1 << 16 - 1)):
            z = z - (1 << 16)

        # Multiply the values by the scale multiplier to get the acceleration
        # in g.
        # The scale multiplier is given in the datasheet.
        x = x * self.SCALE_MULTIPLIER
        y = y * self.SCALE_MULTIPLIER
        z = z * self.SCALE_MULTIPLIER

        # Multiply the values in g by the gravity in m/s^2 to get the
        # acceleration in m/s^2.
        x = x * self.GRAVITY_MS2
        y = y * self.GRAVITY_MS2
        z = z * self.GRAVITY_MS2

        # Round the values if the user wants to
#        if round == True:
#            x = round(x, 4)
#            y = round(y, 4)
#            z = round(z, 4)
        
        braking = ctrl.ControlSystemSimulation(brake_ctrl)
        braking.input['Xaxis'] = x
        braking.input['Yaxis'] = y
        braking.input['Zaxis'] = z
        braking.compute()
        #global hasil
        hasil = braking.output['BrakeLevel']

        # Return the correct values
        if self.DEBUG == False:
            return {"x": x, "y": y, "z": z, "hasil": hasil}
        elif self.DEBUG == True:
            return {"x": x, "y": y, "z": z, "hasil": hasil, "bytes": bytes}
        else:
            return {"x": x, "y": y, "z": z, "hasil" : hasil}


    def get_one_value(self, value, round = False):
        """Reads one value and returns it.
        value -- the value to be read. this can be 'x', 'y' or 'z'.
        """
        read_register = 0x00

        if value == 'x':
            read_register = self.DATAX0
        elif value == 'y':
            read_register = self.DATAY0
        elif value == 'z':
            read_register = self.DATAZ0

        # Read the raw bytes from the ADXL345
        bytes = self.bus.read_i2c_block_data(self.address, read_register, 2)

        # bit shifting magic.
        val = bytes[0] | (bytes[1] << 8)
        if(val & (1 << 16 - 1)):
            val = val - (1 << 16)

        # Multiply the value by the scale multiplier to get the acceleration
        # in g.
        val = val * self.SCALE_MULTIPLIER

        # Multiply the value in g by the gravity in m/s^2 to get the
        # acceleration in m/s^2.
        val = val * self.GRAVITY_MS2

        # Round the values if the user wants to
        if round == True:
            val = round(val, 4)

        return val

# If a user runs this file just display the latest values
if __name__ == '__main__':
 while True:
    accelerometer = ADXL345(0x53)
    axes = accelerometer.get_all_axes()
    print("x: %.3f" % (axes['x']))
    print("y: %.3f" % (axes['y']))
    print("z: %.3f" % (axes['z']))
    print("hasil: %.2f" % (axes['hasil']))
    time.sleep(0.00000001)
    pesan = round(axes['hasil'], 2)
    pesan = pesan * 100
    pesan = int(pesan)
    biner = bin(int.from_bytes(pesan.encode(), 'big'))
    bin2list = biner[2:]
    listbin = []
    for i in bin2list:
        listbin.append(i)
        listbin.insert(0,"0")
        listbin.insert(0,"1")
    for i in range(len(listbin)):
        nilai = listbin[i]
        if (nilai == "0"):
            GPIO.output(12, GPIO.LOW)
        if(nilai == "1"):
            GPIO.output(12, GPIO.HIGH)
    time.sleep(.001)
    GPIO.output(12,GPIO.LOW)

!apt-get -qq install python-smbus python3-smbus



import smbus
import time
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import binascii
import RPi.GPIO as GPIO   
from time import sleep     
GPIO.setwarnings(False)    
GPIO.setmode(GPIO.BOARD)   
GPIO.setup(12, GPIO.OUT, initial=GPIO.LOW)   

class ADXL345:
    # Global Variables
    EARTH_GRAVITY_MS2 = 9.80665
    GRAVITY_MS2 = None
    # This is the typical scale factor in g/LSB as given in the datasheet (page 4)
    SCALE_MULTIPLIER = 0.0039
    # This is the bus that we use to send data over I2C
    bus = smbus.SMBus(1)
    address = None
    DEBUG = False

    # ADXL345 Registers
    DATA_FORMAT = 0x31
    BANDWIDTH_RATE_REG = 0x2C
    POWER_CTL = 0x2D
    measure = 0x08

    BANDWIDTH_RATE_1600HZ = 0x0F
    BANDWIDTH_RATE_800HZ = 0x0E
    BANDWIDTH_RATE_400HZ = 0x0D
    BANDWIDTH_RATE_200HZ = 0x0C
    BANDWIDTH_RATE_100HZ = 0x0B
    BANDWIDTH_RATE_50HZ = 0x0A
    BANDWIDTH_RATE_25HZ = 0x09

    RANGE_2G = 0x00
    RANGE_4G = 0x01
    RANGE_8G = 0x02
    RANGE_16G = 0x03

    DATAX0 = 0x32
    DATAX1 = 0x33
    DATAY0 = 0x34
    DATAY1 = 0x35
    DATAZ0 = 0x36
    DATAZ1 = 0x37

    hasil = None

    def __init__(self,  address = 0x53, base_range = RANGE_2G, base_bandwidth_rate = BANDWIDTH_RATE_100HZ):
        self.GRAVITY_MS2 = self.EARTH_GRAVITY_MS2
        self.address = address
        self.set_bandwidth_rate(base_bandwidth_rate)
        self.set_range(base_range)
        self.enable_measurement()
        self.fuzzy()

    def enable_measurement(self):
        """Enables measurement by writing 0x08 to POWER_CTL."""
        try:
            self.bus.write_byte_data(self.address, self.POWER_CTL, self.measure)
        except:
            return -1

    def disable_measurement(self):
        """Disables measurement by writing 0x00 to POWER_CTL."""
        try:
            self.bus.write_byte_data(self.address, self.POWER_CTL, 0x00)
        except:
            return -1

    def read_measurement_mode(self):
        """Reads POWER_CTL.
        Returns the read value.
        """
        try:
            return self.bus.read_byte_data(self.address, self.POWER_CTL)
        except:
            return -1

    def set_bandwidth_rate(self, rate):
        """Changes the bandwidth rate by writing rate to BANDWIDTH_RATE_REG.
        rate -- the bandwidth rate the ADXL345 will be set to. Using a
        pre-defined rate is advised.
        """
        try:
            self.bus.write_byte_data(self.address, self.BANDWIDTH_RATE_REG, rate)
        except:
            return -1

    def read_bandwidth_rate(self):
        """Reads BANDWIDTH_RATE_REG.
        Returns the read value.
        """
        try:
            raw_bandwidth_rate = self.bus.read_byte_data(self.address, self.bandwidthRate)
            return raw_bandwidth_rate & 0x0F
        except:
            return -1

    # Changes the range of the ADXL345. Available ranges are 2G, 4G, 8G and 16G.
    def set_range(self, range):
        """Changes the range of the ADXL345.
        range -- the range to set the accelerometer to. Using a pre-defined
        range is advised.
        """
        value = None

        try:
            value = self.bus.read_byte_data(self.address, self.DATA_FORMAT)
        except:
            return -1

        value &= ~0x0F;
        value |= range;
        value |= 0x08;

        self.bus.write_byte_data(self.address, self.DATA_FORMAT, value)

    def read_range(self, hex):
        """Reads the range the ADXL345 is currently set to.
        hex -- If hex is true it wil return a hexadecimal value. If raw is false
        it will return a string.
        """
        raw_value = self.bus.read_byte_data(self.address, self.DATA_FORMAT)

        if hex is True:
            if raw_value == 8:
                return self.RANGE_2G
            elif raw_value == 9:
                return self.RANGE_4G
            elif raw_value == 10:
                return self.RANGE_8G
            elif raw_value == 11:
                return self.RANGE_16G
        elif hex is False:
            if raw_value == 8:
                return "2G"
            elif raw_value == 9:
                return "4G"
            elif raw_value == 10:
                return "8G"
            elif raw_value == 11:
                return "16G"
    def fuzzy(self):
        #The universe of variables and membership functions
        Xaxis = ctrl.Antecedent (np.arange(-3.5, 7.5, 0.2), 'Xaxis')
        Yaxis = ctrl.Antecedent(np.arange(-10.5, 15.5, 0.2), 'Yaxis')
        Zaxis = ctrl.Antecedent(np.arange(-15.5, 20.5, 0.2), 'Zaxis')
        BrakeLevel = ctrl.Consequent(np.arange(-0.05, 1.05, 0.2), 'BrakeLevel')

    	# Rules
        Xaxis['HardBrake'] = fuzz.trapmf(Xaxis.universe, [-3, -3, -0.5, 1])
        Xaxis['NoBrake'] = fuzz.trimf(Xaxis.universe, [-0.5, 1.5, 3.5])
        Xaxis['Brake'] = fuzz.trapmf(Xaxis.universe, [2.5, 4, 11.5, 12])
        Yaxis['HardBrake'] = fuzz.trapmf(Yaxis.universe, [-10, -10, 3.5, 6.5])
        Yaxis['Brake'] = fuzz.trimf(Yaxis.universe, [5, 7.5, 10])
        Yaxis['NoBrake'] = fuzz.trapmf(Yaxis.universe, [8.5, 11, 15, 25])
        Zaxis['Brake'] = fuzz.trapmf(Zaxis.universe, [-15, -15, 4, 9])
        Zaxis['NoBrake'] = fuzz.trimf(Zaxis.universe, [5, 11.5, 18])
        Zaxis['HardBrake'] = fuzz.trapmf(Zaxis.universe, [12, 16, 20, 30])
        BrakeLevel['NoBrake'] = fuzz.trapmf(BrakeLevel.universe, [0, 0, 0.2, 0.4])
        BrakeLevel['Brake'] = fuzz.trimf(BrakeLevel.universe, [0.3, 0.5, 0.7])
        BrakeLevel['HardBrake'] = fuzz.trapmf(BrakeLevel.universe, [0.6, 0.8, 1, 1])


    	#DECLARE THE RULES
        rule1 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule2 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule3 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule4 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule5 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule6 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule7 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule8 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule9 = ctrl.Rule(Xaxis['HardBrake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        rule10 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule11 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule12 = ctrl.Rule(Xaxis['Brake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule13 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule14 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule15 = ctrl.Rule(Xaxis['Brake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule16 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule17 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule18 = ctrl.Rule(Xaxis['Brake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        rule19 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['Brake'], BrakeLevel['HardBrake'])
        rule20 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['NoBrake'], BrakeLevel['HardBrake'])
        rule21 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['HardBrake'] & Zaxis['HardBrake'], BrakeLevel['HardBrake'])
        rule22 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['Brake'], BrakeLevel['Brake'])
        rule23 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['NoBrake'], BrakeLevel['Brake'])
        rule24 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['Brake'] & Zaxis['HardBrake'], BrakeLevel['Brake'])
        rule25 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['Brake'], BrakeLevel['NoBrake'])
        rule26 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['NoBrake'], BrakeLevel['NoBrake'])
        rule27 = ctrl.Rule(Xaxis['NoBrake'] & Yaxis['NoBrake'] & Zaxis['HardBrake'], BrakeLevel['NoBrake'])
        global brake_ctrl
        brake_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15, rule16, rule17, rule18, rule19, rule20, rule21, rule22, rule23, rule24, rule25, rule26, rule27])

    def get_all_axes(self, round = False):
        """Gets the measurement results from all the axes.
        round -- if round is true it will round to 4 digits.
        Returns a dictionary.
        """
        # Read the raw bytes from the ADXL345
        bytes = self.bus.read_i2c_block_data(self.address, self.DATAX0, 6)

	#bib = self.fuzzy(brake_ctrl)
        # bit shifting magic.
        x = bytes[0] | (bytes[1] << 8)
        if(x & (1 << 16 - 1)):
            x = x - (1 << 16)

        y = bytes[2] | (bytes[3] << 8)
        if(y & (1 << 16 - 1)):
            y = y - (1 << 16)

        z = bytes[4] | (bytes[5] << 8)
        if(z & (1 << 16 - 1)):
            z = z - (1 << 16)

        # Multiply the values by the scale multiplier to get the acceleration
        # in g.
        # The scale multiplier is given in the datasheet.
        x = x * self.SCALE_MULTIPLIER
        y = y * self.SCALE_MULTIPLIER
        z = z * self.SCALE_MULTIPLIER

        # Multiply the values in g by the gravity in m/s^2 to get the
        # acceleration in m/s^2.
        x = x * self.GRAVITY_MS2
        y = y * self.GRAVITY_MS2
        z = z * self.GRAVITY_MS2

        # Round the values if the user wants to
#        if round == True:
#            x = round(x, 4)
#            y = round(y, 4)
#            z = round(z, 4)
        
        braking = ctrl.ControlSystemSimulation(brake_ctrl)
        braking.input['Xaxis'] = x
        braking.input['Yaxis'] = y
        braking.input['Zaxis'] = z
        braking.compute()
        #global hasil
        hasil = braking.output['BrakeLevel']

        # Return the correct values
        if self.DEBUG == False:
            return {"x": x, "y": y, "z": z, "hasil": hasil}
        elif self.DEBUG == True:
            return {"x": x, "y": y, "z": z, "hasil": hasil, "bytes": bytes}
        else:
            return {"x": x, "y": y, "z": z, "hasil" : hasil}


    def get_one_value(self, value, round = False):
        """Reads one value and returns it.
        value -- the value to be read. this can be 'x', 'y' or 'z'.
        """
        read_register = 0x00

        if value == 'x':
            read_register = self.DATAX0
        elif value == 'y':
            read_register = self.DATAY0
        elif value == 'z':
            read_register = self.DATAZ0

        # Read the raw bytes from the ADXL345
        bytes = self.bus.read_i2c_block_data(self.address, read_register, 2)

        # bit shifting magic.
        val = bytes[0] | (bytes[1] << 8)
        if(val & (1 << 16 - 1)):
            val = val - (1 << 16)

        # Multiply the value by the scale multiplier to get the acceleration
        # in g.
        val = val * self.SCALE_MULTIPLIER

        # Multiply the value in g by the gravity in m/s^2 to get the
        # acceleration in m/s^2.
        val = val * self.GRAVITY_MS2

        # Round the values if the user wants to
        if round == True:
            val = round(val, 4)

        return val

# If a user runs this file just display the latest values
if __name__ == '__main__':
 while True:
    accelerometer = ADXL345(0x53)
    axes = accelerometer.get_all_axes()
    print("x: %.3f" % (axes['x']))
    print("y: %.3f" % (axes['y']))
    print("z: %.3f" % (axes['z']))
    print("hasil: %.2f" % (axes['hasil']))
    time.sleep(0.00000001)
    pesan = round(axes['hasil'], 2)
    pesan = pesan * 100
    pesan = int(pesan)
    biner = bin(int.from_bytes(pesan.encode(), 'big'))
    bin2list = biner[2:]
    listbin = []
    for i in bin2list:
        listbin.append(i)
        listbin.insert(0,"0")
        listbin.insert(0,"1")
    for i in range(len(listbin)):
        nilai = listbin[i]
        if (nilai == "0"):
            GPIO.output(12, GPIO.LOW)
        if(nilai == "1"):
            GPIO.output(12, GPIO.HIGH)
    time.sleep(.001)
    GPIO.output(12,GPIO.LOW)